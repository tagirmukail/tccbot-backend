// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// 1_create_bin_size.down.sql
// 1_create_bin_size.up.sql
// 2_create_signal_type.down.sql
// 2_create_signal_type.up.sql
// 3_create_signals.down.sql
// 3_create_signals.up.sql
// 4_create_orders.down.sql
// 4_create_orders.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_bin_sizeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xca\xcc\x8b\x2f\xce\xac\x4a\xb5\xe6\x02\x04\x00\x00\xff\xff\x0c\x6d\x43\x10\x1f\x00\x00\x00")

func _1_create_bin_sizeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_bin_sizeDownSql,
		"1_create_bin_size.down.sql",
	)
}

func _1_create_bin_sizeDownSql() (*asset, error) {
	bytes, err := _1_create_bin_sizeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_bin_size.down.sql", size: 31, mode: os.FileMode(436), modTime: time.Unix(1589719441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_bin_sizeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x0b\xc2\x30\x10\xc5\xf1\x3d\x9f\xe2\x6d\x49\xc0\xc1\x0c\x82\xd0\xe9\x2c\x27\x06\x63\x2a\x97\x6b\xb1\x93\x50\x14\xcc\x60\x17\x37\x3f\xbd\x54\xc4\xe9\xc7\x1b\xde\xbf\x15\x26\x65\x28\xed\x12\x23\xee\x91\x3b\x05\x5f\x62\xd1\x82\xa9\xce\xd7\x57\x7d\xdf\xe1\x0c\x80\x65\x62\x20\x69\x0f\x24\x6e\xbb\xf6\x38\x4b\x3c\x91\x8c\x38\xf2\xf8\x7d\xe5\x3e\x25\xe3\x1b\x63\x62\x2e\x2c\x8a\x98\xb5\xfb\x37\xdc\x54\x67\x8f\x81\x52\xcf\x05\xce\x86\xa7\xf5\x2b\x07\xbb\xf9\x19\x1e\x8b\x36\xdc\xac\x6f\xcc\x27\x00\x00\xff\xff\x04\xa5\x20\xde\x93\x00\x00\x00")

func _1_create_bin_sizeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_bin_sizeUpSql,
		"1_create_bin_size.up.sql",
	)
}

func _1_create_bin_sizeUpSql() (*asset, error) {
	bytes, err := _1_create_bin_sizeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_bin_size.up.sql", size: 147, mode: os.FileMode(436), modTime: time.Unix(1589720102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_signal_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xce\x4c\xcf\x4b\xcc\x89\x2f\xa9\x2c\x48\xb5\xe6\x02\x04\x00\x00\xff\xff\xd0\x6a\x23\x77\x22\x00\x00\x00")

func _2_create_signal_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_signal_typeDownSql,
		"2_create_signal_type.down.sql",
	)
}

func _2_create_signal_typeDownSql() (*asset, error) {
	bytes, err := _2_create_signal_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_signal_type.down.sql", size: 34, mode: os.FileMode(436), modTime: time.Unix(1589719455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_signal_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xc1\x0a\x82\x40\x10\xc6\xf1\xbb\x4f\xf1\xdd\x76\x17\x3a\xd8\xd9\xd3\x68\x13\x2d\xad\x6b\xcc\xae\x96\xa7\x10\x12\x11\xc4\xa2\xba\xf4\xf6\x81\x79\xe8\xf4\x63\x06\xbe\x7f\x21\x4c\x91\x11\x29\x77\x0c\xbb\x87\xaf\x22\xf8\x62\x43\x0c\x78\x8d\xc3\xdc\x4d\xd7\xf7\xe7\xd1\x43\xff\x0e\x34\x24\xc5\x81\x44\x6f\xd3\xd4\xe0\x24\xb6\x24\x69\x71\xe4\x76\xd9\xf9\xda\x39\x93\x25\x89\xf5\x81\x25\xc2\xfa\x58\xfd\x47\xd6\x86\x41\x43\xae\xe6\x00\xad\x42\x49\xca\x6c\xb4\xe2\xd5\xf3\xaa\x04\xbb\x98\xdf\xa7\x71\x1e\xfa\x67\xde\xcd\xb7\xe5\x51\x52\xb1\x53\x26\x4b\xbe\x01\x00\x00\xff\xff\x7d\xca\x3e\xb5\xb6\x00\x00\x00")

func _2_create_signal_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_signal_typeUpSql,
		"2_create_signal_type.up.sql",
	)
}

func _2_create_signal_typeUpSql() (*asset, error) {
	bytes, err := _2_create_signal_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_signal_type.up.sql", size: 182, mode: os.FileMode(436), modTime: time.Unix(1589720132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_signalsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xce\x4c\xcf\x4b\xcc\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xe0\x9e\xb1\x20\x1e\x00\x00\x00")

func _3_create_signalsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_signalsDownSql,
		"3_create_signals.down.sql",
	)
}

func _3_create_signalsDownSql() (*asset, error) {
	bytes, err := _3_create_signalsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_signals.down.sql", size: 30, mode: os.FileMode(436), modTime: time.Unix(1589715392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_signalsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4d\x4f\x02\x31\x10\x86\xcf\xf2\x2b\xe6\x46\x37\xf1\x80\x89\x37\x4f\x75\x1d\x22\x71\x29\xa6\x76\x4d\x38\x6d\x5a\xb6\xac\x4d\xba\x65\x43\x47\x8c\xfe\x7a\x23\x04\x3f\x0e\x85\xda\xd3\x7b\x78\xe6\x9d\xcc\xd3\x52\x22\x57\x08\x8a\xdf\x56\x08\xd1\x75\x41\xfb\xc8\x46\x90\x78\xae\xfd\x89\x81\x6c\x67\xb7\xf0\x28\x67\x73\x2e\x97\xf0\x80\x4b\xe0\xb5\x5a\xcc\x44\x29\x71\x8e\x42\x5d\x26\x5b\x8c\x0b\xc7\xf8\xcc\x65\x79\xcf\x25\xbb\x9a\x4c\x0a\x10\x0b\x05\xa2\xae\x2a\xb8\xc3\x29\xaf\x2b\x05\x6c\x3c\x2e\x40\xe2\x14\x25\x8a\x12\x9f\xbe\x06\x9b\xe8\x3e\x2c\x33\x2e\x14\xe9\xfe\xc3\x19\x0d\xfd\xbb\xff\x38\xf8\x3e\x58\x76\xc8\x27\xb6\x04\xf8\xed\x22\xcd\xf5\x7a\xd5\x36\x6b\x1d\x29\x87\x8b\x7e\xf3\x96\xc5\xb9\xee\xdc\x5e\x72\xbd\x8d\xa4\xfb\xe1\x4f\xfc\x96\x70\x56\xdf\x0e\x00\xd6\x7e\xa3\xe9\xfa\xc4\x4f\x1a\xf2\x70\x91\x05\xf6\x3e\x8f\x33\x79\x85\x7b\x0b\xbb\x7d\xcc\x42\x5f\xb2\xee\x59\x6d\xad\x26\xdb\x36\x9a\xc0\xb8\xce\x05\xca\xd0\xf5\x3a\xb4\x89\x99\x51\x71\x33\xfa\x0c\x00\x00\xff\xff\xb9\x82\x86\xf6\x60\x03\x00\x00")

func _3_create_signalsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_signalsUpSql,
		"3_create_signals.up.sql",
	)
}

func _3_create_signalsUpSql() (*asset, error) {
	bytes, err := _3_create_signalsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_signals.up.sql", size: 864, mode: os.FileMode(436), modTime: time.Unix(1589731513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_ordersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x2f\x4a\x49\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xbd\x55\x50\x52\x1d\x00\x00\x00")

func _4_create_ordersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_ordersDownSql,
		"4_create_orders.down.sql",
	)
}

func _4_create_ordersDownSql() (*asset, error) {
	bytes, err := _4_create_ordersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_orders.down.sql", size: 29, mode: os.FileMode(436), modTime: time.Unix(1589720712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_ordersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\x3e\xee\x4a\x1c\xf6\xb0\x07\x24\x4e\xa5\x0d\x52\x44\xb6\x29\x21\x8b\xb4\x27\xe4\xda\x53\x33\xac\x63\x5b\xe3\x49\x69\xfe\x3d\xca\x2e\xa5\x45\x90\x66\xe8\x69\x2c\x7d\xef\xe9\xcd\x74\x32\xab\xa6\x58\xb6\x85\x6a\x97\xef\xab\x42\x45\xb2\x40\xf9\x66\xa1\xfe\xfd\x43\x7b\x2e\x03\x83\x03\x52\xdb\xa6\x7c\x58\x36\x4f\xea\x63\xf1\xa4\x96\x8f\x6d\x5d\x6e\x56\x4d\xf1\x50\x6c\xda\x37\x53\x26\xda\x98\xd8\x07\x1e\xcb\x1d\x3a\x0c\x3c\x4d\x1e\xdc\xf6\xf8\x5a\xee\x7d\xd4\x7c\x3f\x49\x1a\x5f\x93\x2d\xd7\x63\x79\xd0\x64\xbe\x69\xba\xb9\xbf\xbb\xbb\xbd\xce\x57\x18\x9e\xcb\xb5\x50\x10\x03\x63\x70\x10\xcc\xd0\x0e\x09\x84\xa2\xbe\xfb\xc4\x83\x12\x74\x6a\x7a\xa2\xd1\xfb\x22\xff\xdb\x2b\xc6\x16\x73\xf2\x7a\x18\xcd\x67\x8c\xe1\xb8\x86\xcc\x18\x34\x63\x0c\xb2\xd4\x70\x04\x53\x86\xcc\x32\xda\x83\x3e\x40\x16\x24\xe9\x7a\xcf\x58\x81\x6b\x20\x45\x1a\x67\x29\x9f\x63\x24\xdb\xc0\xf7\x06\x74\x96\xf6\x10\xc9\x7e\x66\xcd\x7d\x16\xe3\xff\x95\x06\x48\xba\x37\x2f\xb0\x60\x3a\x09\x5c\xbd\xdf\x67\xe0\x2f\xda\xf7\x30\xb7\xee\x09\xdc\x96\xd0\x80\x3c\x74\x1a\xf1\xd3\x63\xc6\x3d\x03\xb3\x5f\x9d\x36\x52\x64\x9f\xd1\xc2\xf9\x25\x59\xe1\x8c\x5d\xf2\xb0\xfa\xf5\x85\xcc\x25\x7a\x81\xab\xdf\xab\x26\xc2\xeb\xd3\xe8\x67\x71\x8e\x69\xbc\x33\x73\xd8\xd0\xed\xa2\x17\x35\xc7\x70\xe4\x3f\xe6\x70\x8d\xc5\x0e\xca\xf0\x21\x92\x11\xfe\x95\xa3\x20\xb3\xee\xd2\x65\x3d\x4d\x93\x0e\x59\x1b\x6e\xb1\x93\xfa\x13\x3a\x07\x04\xaf\xb7\x5e\x24\xf9\x11\xe9\x19\x83\x2b\x83\x45\xa3\x39\x92\xda\xc5\xe8\x41\x87\xe9\x7b\x47\xa0\x19\xec\x57\xcd\x17\xed\x6c\xea\x56\x6d\x1e\xab\x6a\x52\xd5\x27\xfb\x97\x6a\x71\xfb\x6e\xf1\x33\x00\x00\xff\xff\x07\x78\x4a\xad\xc3\x06\x00\x00")

func _4_create_ordersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_ordersUpSql,
		"4_create_orders.up.sql",
	)
}

func _4_create_ordersUpSql() (*asset, error) {
	bytes, err := _4_create_ordersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_orders.up.sql", size: 1731, mode: os.FileMode(436), modTime: time.Unix(1589731505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_bin_size.down.sql":    _1_create_bin_sizeDownSql,
	"1_create_bin_size.up.sql":      _1_create_bin_sizeUpSql,
	"2_create_signal_type.down.sql": _2_create_signal_typeDownSql,
	"2_create_signal_type.up.sql":   _2_create_signal_typeUpSql,
	"3_create_signals.down.sql":     _3_create_signalsDownSql,
	"3_create_signals.up.sql":       _3_create_signalsUpSql,
	"4_create_orders.down.sql":      _4_create_ordersDownSql,
	"4_create_orders.up.sql":        _4_create_ordersUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_bin_size.down.sql":    &bintree{_1_create_bin_sizeDownSql, map[string]*bintree{}},
	"1_create_bin_size.up.sql":      &bintree{_1_create_bin_sizeUpSql, map[string]*bintree{}},
	"2_create_signal_type.down.sql": &bintree{_2_create_signal_typeDownSql, map[string]*bintree{}},
	"2_create_signal_type.up.sql":   &bintree{_2_create_signal_typeUpSql, map[string]*bintree{}},
	"3_create_signals.down.sql":     &bintree{_3_create_signalsDownSql, map[string]*bintree{}},
	"3_create_signals.up.sql":       &bintree{_3_create_signalsUpSql, map[string]*bintree{}},
	"4_create_orders.down.sql":      &bintree{_4_create_ordersDownSql, map[string]*bintree{}},
	"4_create_orders.up.sql":        &bintree{_4_create_ordersUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
